-- ============================================
-- Digital Logbook Sample Data
-- ============================================
-- WARNING: These passwords are PLAIN TEXT for reference only!
-- The application hashes passwords using Argon2 before storing.
-- When inserting manually, you must hash passwords first.
-- ============================================

USE logbookdb;

-- ============================================
-- IMPORTANT: Password Hashing Information
-- ============================================
-- The application uses Argon2 for password hashing.
-- These INSERT statements will NOT work as-is because
-- the passwords need to be hashed first.
-- 
-- Run the application once to let it insert hashed passwords,
-- OR use the application's API to create users.
-- 
-- These are provided as reference for the data structure.
-- ============================================

-- ============================================
-- Sample Users
-- ============================================
-- Note: The password column should contain Argon2 hashes
-- Run `wails dev` once to let the app create these users automatically

-- Admin User
-- Username: admin (or use Employee ID: admin for login)
-- Employee ID: admin
-- Password (plain): admin123
-- Password (hashed): Will be generated by application

-- Instructor User
-- Username: instructor1 (or use Employee ID: instructor1 for login)
-- Employee ID: instructor1
-- Password (plain): inst123
-- Password (hashed): Will be generated by application

-- Student Users
-- Student ID: 2025-1234
-- Password (plain): 2025-1234
-- Password (hashed): Will be generated by application

-- Student ID: 2025-5678
-- Password (plain): 2025-5678
-- Password (hashed): Will be generated by application

-- Working Student User
-- Student ID: working1
-- Password (plain): working1
-- Password (hashed): Will be generated by application

-- ============================================
-- Manual User Insertion (Reference Only)
-- ============================================
-- DO NOT RUN THESE - Passwords are not hashed!
-- Let the application create users automatically.

/*
-- Example structure (PASSWORDS NOT HASHED - DO NOT USE):
INSERT INTO users (username, email, password, name, first_name, last_name, role, employee_id) VALUES
('admin', 'admin@university.edu', 'HASHED_PASSWORD_HERE', 'System Administrator', 'System', 'Administrator', 'admin', 'admin');

INSERT INTO users (username, email, password, name, first_name, last_name, role, employee_id) VALUES
('instructor1', 'mreyes@university.edu', 'HASHED_PASSWORD_HERE', 'Mr. Reyes', 'Mr.', 'Reyes', 'instructor', 'instructor1');

INSERT INTO users (username, password, name, first_name, last_name, role, student_id, year) VALUES
('2025-1234', 'HASHED_PASSWORD_HERE', 'Santos, Juan', 'Juan', 'Santos', 'student', '2025-1234', '2nd Yr BSIT');

INSERT INTO users (username, password, name, first_name, last_name, role, student_id, year) VALUES
('2025-5678', 'HASHED_PASSWORD_HERE', 'Cruz, Maria', 'Maria', 'Cruz', 'student', '2025-5678', '2nd Yr BSIT');

INSERT INTO users (username, password, name, first_name, last_name, role, student_id) VALUES
('working1', 'HASHED_PASSWORD_HERE', 'Working Student', 'Working', 'Student', 'working_student', 'working1');
*/

-- ============================================
-- Sample Subjects
-- ============================================
INSERT INTO subjects (code, name, instructor, room) VALUES
('IT101', 'Programming Fundamentals', 'Mr. Reyes', 'Lab A'),
('IT202', 'Database Management', 'Mr. Reyes', 'Lab B'),
('IT303', 'Web Development', 'Ms. Garcia', 'Lab C'),
('IT404', 'Network Security', 'Mr. Torres', 'Lab D'),
('IT505', 'Software Engineering', 'Ms. Garcia', 'Lab E')
ON DUPLICATE KEY UPDATE name=VALUES(name);

-- ============================================
-- Sample Attendance Records
-- ============================================
-- These will be created as students use the system
-- Example structure:
/*
INSERT INTO attendance (student_id, subject_id, date, status, time_in, time_out) VALUES
(3, 1, '2025-10-01', 'Present', '08:00:00', '10:00:00'),
(3, 2, '2025-10-01', 'Present', '10:30:00', '12:30:00'),
(4, 1, '2025-10-01', 'Present', '08:05:00', '10:05:00'),
(4, 2, '2025-10-01', 'Absent', NULL, NULL);
*/

-- ============================================
-- Sample Login Logs
-- ============================================
-- These will be automatically created when users log in
-- The application captures hostname as pc_number
/*
INSERT INTO login_logs (user_id, user_name, user_type, pc_number, login_time, logout_time) VALUES
(1, 'System Administrator', 'admin', 'PC-LAB-01', '2025-10-09 08:00:00', '2025-10-09 17:00:00'),
(2, 'Mr. Reyes', 'instructor', 'PC-LAB-02', '2025-10-09 09:00:00', '2025-10-09 16:00:00'),
(3, 'Santos, Juan', 'student', 'PC-LAB-10', '2025-10-09 10:00:00', '2025-10-09 12:00:00');
*/

-- ============================================
-- Sample Equipment Reports (Feedback)
-- ============================================
-- These will be created when students submit reports
/*
INSERT INTO feedback (student_id, student_name, student_id_str, pc_number, time_in, time_out, equipment, `condition`, comment, date) VALUES
(3, 'Santos, Juan', '2025-1234', 'PC-LAB-10', '10:00:00', '12:00:00', 'Computer', 'Good', 'Working properly', NOW()),
(4, 'Cruz, Maria', '2025-5678', 'PC-LAB-11', '10:05:00', '12:05:00', 'Keyboard', 'Fair', 'Space bar slightly sticky', NOW());
*/

-- ============================================
-- Quick Verification Queries
-- ============================================

-- Check users
SELECT id, username, role, employee_id, student_id, created FROM users;

-- Check subjects
SELECT * FROM subjects;

-- Check attendance count
SELECT COUNT(*) as attendance_records FROM attendance;

-- Check login logs
SELECT user_name, user_type, pc_number, login_time FROM login_logs ORDER BY login_time DESC LIMIT 10;

-- Check feedback
SELECT student_name, pc_number, equipment, `condition`, date FROM feedback ORDER BY date DESC LIMIT 10;

-- ============================================
-- User Credentials for Testing
-- ============================================
-- After running the application once, use these credentials:
--
-- ADMIN:
--   Login Field: Employee ID
--   Employee ID: admin
--   Password: admin123
--
-- INSTRUCTOR:
--   Login Field: Employee ID
--   Employee ID: instructor1
--   Password: inst123
--
-- STUDENT:
--   Login Field: Student ID
--   Student ID: 2025-1234
--   Password: 2025-1234
--
-- STUDENT:
--   Login Field: Student ID
--   Student ID: 2025-5678
--   Password: 2025-5678
--
-- WORKING STUDENT:
--   Login Field: Student ID
--   Student ID: working1
--   Password: working1
-- ============================================

